/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.0 ] */

/* [wxMaxima: title   start ]
Continuacion de la practica 1
   [wxMaxima: title   end   ] */

/* [wxMaxima: section start ]
Se quiere aproximar la única solución real s de la ecuación x^2−3=0 
en
el intervalo [1, 2]. Para ello se consideran, sobre dicho intervalo,
 las siguientes
funciones:
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
g0(x):=x^2-3;g1(x):=x^2+x-3;g2(x):=3/x;g3(x):=(x+3/x)/2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
a) Justifica basandote en la representacion grafica, por que para cada i=1,2,3 gi(x) tiene a s como unico punto fijo en [1,2]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([g0(x),g1(x),g2(x),g3(x),x], [x,1,2])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([g0(x),g1(x),g2(x),g3(x),x], [x,1,2], [y,-0.4,2])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Como observamos en la grafica en el punto s=sqrt(3), solucion de g0, es el unico punto fijo de las gi, en [1,2]
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
b)Para cada i = 1, 2, 3 , elabora un programa que calcule las 10 primeras
iteraciones del método de iteración funcional 
asociado a gi que considera
x
(0) = 2 . El programa debe mostrar en pantalla todas las iteraciones
calculadas con 32 dígitos
 significativos. ¿Para cuál/es de las funciones gi
consideradas el método de iteración funcional asociado permite aproximar
s? Justifica la respuesta y da un valor aproximado para s.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
gi(n):=block([x],
x:2,
        fpprec:32,
if n=1 then
    (
        for i:1 thru 10 do (
   x:g1(x),
        print("iteracion",i," x:",bfloat(x))
        )
    )
else if n=2 then(
        for i:1 thru 10 do (
            x:g2(x),
        print("iteracion",i," x:",bfloat(x))
        )
    )
else if n=3 then(
        for i:1 thru 10 do (
        x:g3(x),
        print("iteracion",i," x:",bfloat(x))
        )
)
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
gi(1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
gi(2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
gi(3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Claramante la que mejor se aproxima es la tercera, ya que desde la quinta iteracion da un valor muy proximo a s.
   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Dada la ecuación x − (1/2)cos(x) = 0 , se pide:
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
a) Razona por qué tiene una única solución s en el intervalo [0, π/2].

    Este problema es equivalente a buscar los puntos fijos de b(x)=cos(x)/2, como vemos en la grafica solamente tiene 1 en el intervalo [0,π/2]
Y comprobamos que cumple las condiciones de convergencia segun el teorema 5
    -b(x) Continua en el intervalo [0, π/2].
    -La imagen de la funcion,b([0, π/2]) está contenida en el intervalo [0, π/2].
    -|b´(x)|≤l≤0.5<1 luego es contractil 
Ya podemos asegurar la convergencia del metodo de iteración funcional y la unicidad del punto fijo
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
b(x):=cos(x)/2;define(db(x),diff(b(x),x,1));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([b(x),x,0,%pi/2], [x,0,%pi/2])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([db(x),-0.5], [x,0,%pi/2],[y,-0.55,0])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
b) Sin calcular iteraciones, describe un método de iteración funcional (distinto
al de Newton-Raphson) que,considerando x^(0) = 1 como aproximación
inicial, permita aproximar s. Razona la respuesta.
¿Qué orden de convergencia tiene la sucesión de iteraciones generada por dicho método?

    Podemos usar el metodo funcional que tiene por función a b(x), y como aproximacion inicial x^0=1
    La convergencia es lineal como consecuencia del teorema de convergencia global (Tº9)
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
c) Elabora un programa que calcule las 12 primeras iteraciones del método
de iteración funcional descrito en el apartado anterior.
 El programa sólo debe mostrar en pantalla, con 32 dígitos significativos, el valor aproximado
de s proporcionado por la última de las iteraciones calculadas.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
pb():=block([x],
fpprec:32,
x:1.0b0,
for i:1 thru 12 do(
    x:b(x)
    ),
print ("solucion hallada x: ",x)
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pb();
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
d) Haz un programa que calcule las iteraciones del método descrito en b)
hasta un número máximo establecido, de modo que cuando la diferencia
en valor absoluto de dos iteraciones consecutivas sea menor que una
cierta tolerancia (tol) se detenga el cálculo de las iteraciones, e informe
de ello mediante el siguiente mensaje: “Se ha alcanzado la tolerancia”.
 El programa además debe mostrar en pantalla, con 32 dígitos significativos,
todas las iteraciones calculadas. Ejecuta el programa para un número
máximo de 50 iteraciones y tol=10−12: ¿Cuántas iteraciones se realizan?
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
pbcontol(n,tol):=block([x],
    x:1.0b0,
    for i:1 thru n do(
        x:b(x),
        print("iteracion ",i," x: ",x),  
        if(abs(x-b(x))<tol) then(
            print("Se ha alcanzado la tolerancia en la iteracion ",i," x: ",x),
            i:n
            )
    )

)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pbcontol(50,10^-12)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Comprueba que s = −2 es un punto fijo de la función g(x) = 1 +x−x^2/4
tal que |g′(s)| > 1. Elabora un programa que calcule las 15 primeras iteraciones
del método de iteración funcional asociado a g que considera x^(0) = −2.05
como aproximación inicial.El programa debe mostrar en pantalla, con 32 digitos significativos, 
todas las iteraciones calculadas. ¿Permite dicho método aproximar s?¿Por qué? 
¿Era de esperar la respuesta anterior?¿Por qué? 
Dibuja juntas en el intervalo [−4, 4] las gráficas de g(x) y de y(x) = x y recuerda
la interpretación geométrica del cálculo de las iteraciones en los métodos de iteración funcional.
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
c(x):=1+x-(x^2/4)$  define(dc(x),diff(c(x),x,1))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Comprobamos que -2 es punto fijo y que la derivada en dicho punto es mayor a 1
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
is(c(-2)=-2);  is(abs(dc(-2))>1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pc():=block([x],
x:-2.05,
fpprec:32,
for i:1 thru 15 do (
    x:c(x),
    print("iteracion: ",i," x:",bfloat(x)) 
    ) 
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pc()$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Como observamos el metodo diverge ,ademas |c´(-2)| es mayor que 1 luego era de esperar este resultado segun la teoria,
y viendo la grafica observamos que segun la interpretacion geometrica, la sucesion que obtenemos es repulsiva ya que 
la funcion se queda por debajo de la identidad, estando el valo inicial a la izquierda de la solucion, luego la sucesion 
diverge negativamente como tambien hemos comprobado empiricamente.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([c(x),x], [x,-4,4])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Comprueba que s = 0 es un punto fijo de la función g(x) = x+x^2/2 
tal que |g′(s)|=1.Dibuja juntas en el intervalo [−0.5,0.5] las gráficas de g(x) y
de y(x) = x, y deduce  si los métodos de iteración funcional asociados a g que
consideran x^(0) = −0.2 y x^(0) = 0.2 , permiten aproximar s. Elabora un
programa que calcule y muestre en pantalla, con 32 dígitos significativos,
las 20 primeras iteraciones de cada uno de estos dos métodos.
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
d(x):=x+x^2/2$ define(dd(x),diff(d(x),x,1))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
is(abs(dd(0))=1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([d(x),x], [x,-0.5,0.5])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([d(x),x], [x,-0.2,0.2])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Observando la grafica vemos que el punto fijo en el intervalo es solamente x=0, ademas comprobado que su derivada es igual a 1
teoricamente no podemos asegurar convergencia para las iteraciones funcionales, solo nos queda dos soluciones:
    1º Geometricamente podemos ver en la segunda grafica que la sucesion convergue a 0 si el x^0=-0.2 pero diverge si x^0=0.2
    2º Empiricamente mediante el programa , que como vemos nos demuestra lo visto en la solucion geometrica
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
pd(x):=block([y],
fpprec:32,
y:x,
for i:1 thru 20 do (
    y:d(y),
    print("iteracion: ",i," y:",bfloat(y)) 
    ) 
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pd(0.2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pd(-0.2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Se considera el polinomio p(x)=2x^4-3x^2+3x-4
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
p(x):=2*x^4-3*x^2+3*x-4;define(dp(x),diff(p(x),x,1));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Haz un programa que utilice el algoritmo de Hörner para hallar el valor
del polinomio en x = −2 y lo muestre en pantalla. Comprueba que dicho
valor es correcto.
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
horner(xi):=block([res,n],
res:coeff(p(x),x,4),
n:4,
for i:1 thru n do(
    res:coeff(p(x),x,4-i)+res*xi
    ),
return (res)
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
is(horner(-2)=p(-2));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Modifica el programa del apartado anterior para que éste calcule, además,
el valor de la primera derivada
 del polinomio en x = −2 y lo muestre
también en pantalla. Comprueba que dicho valor es correcto.
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
hornerdef(xi):=block([res,n,L],
n:4,
L:append(L:[],[res:coeff(p(x),x,n)]),
for i:1 thru n do(
    res:coeff(p(x),x,n-i)+res*xi,
    L:append(L,[res])
    ),
res:L[1],           /*L es una lista con los coeficientes bn, de forma que l[1]=bn,..L[n]=b1, L[n+1]=b0 */
for i:2 thru n do(    /*Por ello vamos desde i:2 hasta n*/
    res:L[i]+res*xi
    ),
return (res)
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
is(hornerdef(-2)=dp(-2));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Dibuja la gráfica del polinomio en un intervalo [a, b] en el que se encuentren
todas las soluciones reales de la ecuación p(x) = 0 , justificando la
elección del intervalo considerado. ¿Cuántas soluciones reales tiene dicha
ecuación? ¿Por qué? ¿Y cuántas complejas? ¿Por qué?
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Por el teorema 12, sabemos que toda solucion ,z,  del polinomio p(x)=2x^4-3x^2+3x-4, cumple que 
para h=max{|ai/an|, para i=1,..n}, |z|<h+1, para este caso concreto |z|<3, luego podemos dibujar la grafica
en el intervalo de x perteneciente a [-3,3] en el cual visualizaremos todas las soluciones.
Como podemos observar contando el numero de cortes del eje de la x, hay 2 soluciones reales, luego como todo polinomio
de grado n tiene exactamente n soluciones en C, y el numero de soluciones complejas siempre es par, podemos afirmar que existen
2 soluciones reales y 2 complejas, todas ellas contenidas en el intervalo [-3,3]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([p(x)], [x,-3,3])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Elabora un programa que calcule las 5 primeras iteraciones del método
de Newton-Raphson que considera x^(0) = −2 como aproximación inicial,
usando el algoritmo de Hörner para calcular cada una de las iteraciones
de dicho método. El programa debe mostrar en pantalla, con 32 dígitos
significativos, todas las iteraciones calculadas.
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
(horner(-2)/hornerdef(-2));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
NewtonRapson(x0):=block(
fprrec:32,
for i:1 thru 5 do(
    x0:x0-(horner(x0)/hornerdef(x0)),
    print("x",i,": ",bfloat(x0))
),
print("resultado : ",bfloat(x0))
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
NewtonRapson(-2)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Haz un programa que calcule las iteraciones del método del apartado
anterior hasta un número máximo establecido, de modo que cuando la
diferencia en valor absoluto de dos iteraciones consecutiv<as sea menor que
una cierta tolerancia (tol) se detenga el cálculo de las iteraciones, e informe
de ello mediante el siguiente mensaje:
 “Se ha alcanzado la tolerancia”.
El programa además debe mostrar en pantalla el número de iteraciones
que ha calculado y el valor con 32 dígitos significativos de (únicamente)
la última de las iteraciones calculadas.
 Ejecuta el programa para un número máximo de 30 iteraciones y tol=10−15:
 ¿Cuántas iteraciones se han calculado? 
¿Qué proporciona la última de las iteraciones calculada?¿Por qué?
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
NewtonRapsonTol(x0,n,tol):=block([xn,j],
fprrec:32,
for i:1 thru n do(
    j:i,
    xn:x0-(horner(x0)/hornerdef(x0)),
    print("x",i,": ",bfloat(xn)),
     if(abs(xn-x0)<tol) then(i:n,print("Se a alcanzado la tolerancia")),
    x0:xn
),
print("resultado : ",bfloat(xn)," En la iteracion ",j)
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
NewtonRapsonTol(-2,30,10^-15)$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
